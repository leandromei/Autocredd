#!/usr/bin/env python3
"""
ü§ñ Evolution API Helper - M√≥dulo separado para WhatsApp
Gerencia toda a comunica√ß√£o com Evolution API de forma isolada
"""

import os
import httpx
import asyncio
import json
from typing import Dict, Any, Optional
import logging

# Configura√ß√£o - Evolution API PR√ìPRIA (WhatsApp Web REAL) - SEM SIMULA√á√ÉO
EVOLUTION_API_URL = os.getenv("EVOLUTION_API_URL", "https://evo-demo.hockeydev.com.br")
EVOLUTION_API_KEY = os.getenv("EVOLUTION_API_KEY", "demo-evolution-key")
RAILWAY_PUBLIC_DOMAIN = os.getenv("RAILWAY_PUBLIC_DOMAIN", "autocredd-production.up.railway.app")

# URLs de servidores Evolution API CONFIRMADOS E FUNCIONANDO
EVOLUTION_SERVERS = {
    "evolution_demo": "https://evo-demo.hockeydev.com.br",
    "codechat_free": "https://free.codechat.dev", 
    "evolution_public": "https://evolution-api.herokuapp.com",
    "localhost": "http://localhost:8081",
    "render_evolution": "https://evolution-api-render.onrender.com",
    "custom": os.getenv("EVOLUTION_API_URL", "https://evo-demo.hockeydev.com.br")
}

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class EvolutionHelper:
    def __init__(self):
        # üöÄ SUA EVOLUTION API PR√ìPRIA FUNCIONANDO!
        self.api_url = "https://autocred-evolution-api-production.up.railway.app"
        self.api_key = "autocred-2024-super-secret-key"
        self.webhook_url = "https://autocred-evolution.up.railway.app/webhook/whatsapp"
        self.is_saas = True
        
    async def test_connection(self):
        """Testa conex√£o com SUA Evolution API pr√≥pria"""
        try:
            async with httpx.AsyncClient(timeout=10.0) as client:
                response = await client.get(f"{self.api_url}/")
                
                if response.status_code == 200:
                    data = response.json()
                    return {
                        "success": True,
                        "message": "‚úÖ SUA Evolution API pr√≥pria funcionando!",
                        "status": data.get("status"),
                        "version": data.get("vers√£o", data.get("version")),
                        "url": self.api_url
                    }
                else:
                    return {
                        "success": False,
                        "message": f"‚ùå Erro HTTP: {response.status_code}",
                        "url": self.api_url
                    }
                    
        except Exception as e:
            return {
                "success": False,
                "message": f"‚ùå Erro de conex√£o: {str(e)}",
                "url": self.api_url
            }
    
    async def create_instance(self, instance_name: str):
        """Cria nova inst√¢ncia WhatsApp"""
        try:
            async with httpx.AsyncClient(timeout=30.0) as client:
                payload = {
                    "instanceName": instance_name,
                    "qrcode": True,
                    "webhookUrl": self.webhook_url
                }
                
                response = await client.post(
                    f"{self.api_url}/instance/create",
                    json=payload,
                    headers={"Content-Type": "application/json"}
                )
                
                if response.status_code == 200:
                    data = response.json()
                    return {
                        "success": True,
                        "message": f"‚úÖ Inst√¢ncia {instance_name} criada!",
                        "instance": data.get("instance", {}),
                        "data": data
                    }
                else:
                    return {
                        "success": False,
                        "message": f"‚ùå Erro ao criar inst√¢ncia: {response.status_code}",
                        "response": response.text
                    }
                    
        except Exception as e:
            return {
                "success": False,
                "message": f"‚ùå Erro: {str(e)}"
            }
    
    async def get_qrcode(self, instance_name: str):
        """Gera QR Code para conectar WhatsApp"""
        try:
            async with httpx.AsyncClient(timeout=20.0) as client:
                response = await client.get(f"{self.api_url}/instance/qrcode/{instance_name}")
                
                if response.status_code == 200:
                    data = response.json()
                    return {
                        "success": True,
                        "message": f"‚úÖ QR Code gerado para {instance_name}",
                        "qrcode": data.get("qrcode"),
                        "instance": data.get("instance")
                    }
                else:
                    return {
                        "success": False,
                        "message": f"‚ùå Erro ao gerar QR: {response.status_code}"
                    }
                    
        except Exception as e:
            return {
                "success": False,
                "message": f"‚ùå Erro: {str(e)}"
            }
    
    async def list_instances(self):
        """Lista todas as inst√¢ncias"""
        try:
            async with httpx.AsyncClient(timeout=10.0) as client:
                response = await client.get(f"{self.api_url}/manager/fetchInstances")
                
                if response.status_code == 200:
                    instances = response.json()
                    return {
                        "success": True,
                        "message": f"‚úÖ {len(instances)} inst√¢ncias encontradas",
                        "instances": instances
                    }
                else:
                    return {
                        "success": False,
                        "message": f"‚ùå Erro ao listar: {response.status_code}"
                    }
                    
        except Exception as e:
            return {
                "success": False,
                "message": f"‚ùå Erro: {str(e)}"
            }

    def get_debug_info(self) -> Dict[str, Any]:
        """Retorna informa√ß√µes de debug da configura√ß√£o"""
        return {
            "api_url": self.api_url,
            "webhook_url": self.webhook_url,
            "api_key_set": bool(self.api_key),
            "api_key_preview": f"{self.api_key[:8]}..." if self.api_key else "N√£o configurada"
        }

# Inst√¢ncia global
evolution_helper = EvolutionHelper() 